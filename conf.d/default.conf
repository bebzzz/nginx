server {
	listen 80 default_server;
	server_name _;
 	return 301 https://$host$request_uri;  					# redirecting HTTP to HTTPS
}

server {
	listen 443 ssl http2;							# HTTPv2 is set
	server_name _;
	root /usr/share/nginx/html;

	modsecurity on;								# enable previously compiled ModSecurity module
	modsecurity_rules_file /etc/nginx/modsecurity/modsecurity.conf;


	ssl_certificate /etc/nginx/ssl/public.pem;
	ssl_certificate_key /etc/nginx/ssl/private.key;


	ssl_session_timeout 1d;							# how long a session can persist. renew session in 1 day. (delault is 5 minutes)
	ssl_session_cache shared:SSL:50m;					# the number of sessions to cache. The shared value indicates that it can be used by all NGINX processes. One megabyte of space can hold about 4,000 sessions
	
	ssl_session_tickets off;						# SSL Tickets are an idea where encrypted session information is stored on the client instead of the server. We’re opting to not use tickets

	ssl_protocols TLSv1.2;
	ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';		# This list is taken directly from Mozilla as recommended.

	ssl_prefer_server_ciphers on;

	add_header Strict-Transport-Security max-age=1576800;			# HSTS is a way to have NGINX tell the client that it should never interact with our domain using HTTP, and we add this using a header. (in 6 month)

	ssl_stapling on;							# Online Certificate Status Protocol”. Without OCSP stapling, the client will need to make a separate request to verify the validity of a certificate from the issuer, but with OSCP stapling, the server can make that request and cache it for awhile to return that information with the initial handshake. Let’s add OCSP Stapling

	rewrite ^(/.*)\.html(\?.*)?$ $1$2 redirect;				# cut .html from uri
	rewrite ^/(.*)/$ /$1 redirect; 						# cut slash '/' from the end of uri 

	location / {
		try_files $uri/index.html $uri.html $uri/ $uri = 404;		# if files was not found, redirect to 404
	}

	location = /admin {
		auth_basic "Login Required";
		auth_basic_user_file /etc/nginx/.htpasswd;
		try_files $uri/index.html $uri.html $uri/ $uri = 404;		# if files was not found, redirect to 404
	}

	error_page 404 /404.html;
	error_page 500 501 502 503 504 /50x.html;
}
